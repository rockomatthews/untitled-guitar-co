import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    Scroll,
    motionValue,
    useTransform,
    Stack,
} from "framer"
import { colors } from "./Colors"
import { Icon, iconNames } from "./Icon"
// Learn more: https://framer.com/api

// contentOffset is for the large title scrolling behavior
const contentOffset = motionValue(0)

export function truncate(str) {
    return str.length > 20
        ? str.substring(0, 9) + "â€¦" + str.substring(str.length - 10, str.length)
        : str
}

export function ModalView(props) {
    const { text, tint, onTap, ...rest } = props

    // leftAction is for choosing whether you want a view with Cancel or a view with a back arrow.
    const leftAction = {
        a: (
            <Frame
                id="Cancel"
                height={44}
                width="auto"
                left={4}
                top={0}
                style={{
                    fontSize: 17,
                    color: props.tint,
                    paddingTop: 10,
                }}
                background="null"
            >
                <span>Cancel</span>
            </Frame>
        ),
        b: (
            <Frame
                id="Back Arrow"
                height={40}
                width={24}
                left={4}
                top={0}
                background="null"
            >
                <Icon name="Back Arrow" tintColor={props.tint} />
            </Frame>
        ),
        c: (
            <Frame
                id="Close Button"
                height={40}
                width={24}
                left={4}
                top={0}
                background="null"
            >
                <Icon name="Close" tintColor={props.tint} />
            </Frame>
        ),
        d: null,
    }

    const rightAction = {
        a: null,
        b: (
            <Frame
                id="Save Disabled"
                height={44}
                width="auto"
                right={4}
                top={0}
                style={{
                    fontSize: 17,
                    fontWeight: 600,
                    color: "#585f66",
                    paddingTop: 10,
                }}
                background="null"
            >
                <span>Save</span>
            </Frame>
        ),
        c: (
            <Frame
                id="Save Enabled"
                height={44}
                width="auto"
                right={4}
                top={0}
                style={{
                    fontSize: 17,
                    fontWeight: 600,
                    color: props.tint,
                    paddingTop: 10,
                }}
                background="null"
            >
                <span>Save</span>
            </Frame>
        ),
        d: (
            <Frame
                id="Edit"
                height={44}
                width="auto"
                right={4}
                top={0}
                style={{
                    fontSize: 17,
                    color: props.tint,
                    paddingTop: 10,
                }}
                background="null"
            >
                <span>Edit</span>
            </Frame>
        ),
        e: (
            <Frame
                id="Close Button"
                height={40}
                width={24}
                right={4}
                top={0}
                background="null"
            >
                <Icon name="Close" tintColor={props.tint} />
            </Frame>
        ),
    }

    // height and opacity are for the scrolling effect in the large title navigation bar.

    const height = useTransform(
        contentOffset,
        [0, props.wrapTitle ? -96 : -56, -96],
        [props.wrapTitle ? 136 : 96, 44, 44],
        {
            clamp: false,
        }
    )
    const smallTitleOpacity = useTransform(contentOffset, [-20, -52], [0, 1])
    const largeTitleOpacity = useTransform(
        contentOffset,
        [-16, props.wrapTitle ? -52 : -32],
        [1, 0]
    )

    return (
        <Frame
            id="Scene Background"
            {...rest}
            background={colors.grayDark}
            onTap={onTap}
            shadow="0 2px 20px rgba(0,0,0,0.5)"
            style={{
                borderRadius: "30px 30px 0 0",
                shadow: "inset 0 1px 1px 0px rgba(255, 255, 255, 0.12)",
            }}
            overflow="hidden"
        >
            {props.isScrolling ? (
                <Scroll
                    id="Content"
                    contentOffsetY={contentOffset}
                    top={56}
                    width="100%"
                    bottom={0}
                    backgroundColor={null}
                >
                    {props.children}
                </Scroll>
            ) : null}
            <Frame
                id="Navbar"
                height={height}
                width="100%"
                top={12}
                background={colors.grayDark}
            >
                <Frame
                    id="Large Title"
                    bottom={9}
                    left={16}
                    right={16}
                    height="auto"
                    style={{
                        fontWeight: 800,
                        fontSize: 34,
                        color: "white",
                        opacity: largeTitleOpacity,
                    }}
                    background={null}
                >
                    <span>{props.title}</span>
                </Frame>
                <Frame
                    id="Actions"
                    height={44}
                    left={12}
                    right={12}
                    top={0}
                    background={colors.grayDark}
                >
                    {leftAction[props.leftAction]}
                    <Frame
                        id="Small Title"
                        {...rest}
                        height={38}
                        top={0}
                        style={{
                            fontWeight: 800,
                            fontSize: 18,
                            color: "white",
                            opacity: smallTitleOpacity,
                        }}
                        background="null"
                    >
                        {truncate(props.title)}
                    </Frame>
                    {rightAction[props.rightAction]}
                </Frame>
            </Frame>
            <Stack
                id="Home Indicator Bar"
                background="null"
                height={13}
                width="100%"
                bottom={0}
            >
                <Frame
                    background="#ffffff"
                    height={5}
                    width={134}
                    radius={2.5}
                />
            </Stack>
        </Frame>
    )
}

ModalView.defaultProps = {
    height: 762,
    width: 375,
    title: "Ownership",
    tint: "#4af196",
    leftAction: "c",
    rightAction: "c",
    wrapTitle: false,
    isScrolling: false,
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(ModalView, {
    leftAction: {
        title: "Left Action",
        type: ControlType.Enum,
        options: ["a", "b", "c", "d"],
        optionTitles: ["Cancel", "Back", "Close", "None"],
        defaultValue: "a",
    },
    rightAction: {
        title: "Right Action",
        type: ControlType.Enum,
        options: ["a", "b", "c", "d", "e"],
        optionTitles: [
            "None",
            "Save (Disabled)",
            "Save (Enabled)",
            "Edit",
            "Close",
        ],
        defaultValue: "a",
    },
    title: {
        title: "Title",
        type: ControlType.String,
        defaultValue: "View Title",
    },
    wrapTitle: {
        title: "Wrap Title?",
        type: ControlType.Boolean,
        enabledTitle: "Wrap",
        disabledTitle: "Default",
        defaultValue: false,
    },
    tint: {
        title: "Tint",
        type: ControlType.Color,
        defaultValue: "#4af196",
    },
    isScrolling: {
        title: "Scrolling?",
        type: ControlType.Boolean,
        defaultValue: false,
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
    children: {
        title: "Content",
        type: ControlType.ComponentInstance,
        hidden(props) {
            return props.isScrolling === false
        },
    },
    onTap: {
        type: ControlType.EventHandler,
    },
})
